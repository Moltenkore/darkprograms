--Title: Dark Server
Version = 5.3
--Author: Darkrising (minecraft name djhannz)
--Platform: ComputerCraft Lua Virtual Machine
if fs.exists("dark") == false then -- load darkAPI
  print("Missing DarkAPI")
  print("Attempting to download...")
  getGit = http.get("https://github.com/darkrising/darkprograms/raw/darkprograms/darksecurity/dark")
  getGit = getGit.readAll()
  file = fs.open("dark", "w")
  file.write(getGit)
  file.close()
  os.reboot()
else
  os.loadAPI("dark")
end
S = dark.findPeripheral("modem")
if S == false then
  print("Please attach Modem") 
  return exit
else
  rednet.open(S)  
end

x, y = term.getSize()
AutoUpdate = true
GlobalMenuWaitTime = 1
SLevel = 1
term.clear() term.setCursorPos(1,1)
function rednetSendE(ID, Message)
  if Config.encryption == true then
    Message = dark.encrypt(Message, 1)
  end
  rednet.send(ID, Message)
end
function newUser(sLevel, Username, Password, isadmin)
  masterdb[sLevel].user[Username] = {}
  masterdb[sLevel].user[Username].password = Password
  masterdb[sLevel].user[Username].admin = isadmin
  databaseSave()
end
function delUser(sLevel, Username)
  masterdb[sLevel].user[Username] = nil
  databaseSave()
end
function makenew()
  local LevelTemplate = {
    ids = {},
    user = {},
    pc = {
      general = {},
      super = {}
    }
  }
  return LevelTemplate
end
function databaseSave()
  dark.db.save(".DarkDB", masterdb)
  dark.db.save(".DarkS_conf", Config)
end
function databaseLoad()
  masterdb = dark.db.load(".DarkDB")
  Config = dark.db.load(".DarkS_conf")  
end
function Header(text, lText, rText) -- builds a header using functions above from <text>
  dark.printL("-", 1, nil, "blue", "blue")
  dark.printA("|", x, 2, nil, "blue", "blue")
  dark.printA("|", 1, 2, nil, "blue", "blue")
  dark.printC(string.rep(" ", x), 2, nil, "white", "blue")
  if lText then dark.printA(lText, 1, 2, nil, "white", "blue") end
  if rText then dark.printA(rText, x - #rText, 2, nil, "white", "blue") end
  dark.printC(text, 2, nil, "yellow", "blue")
  dark.printL("-", 3, 5, "blue", "blue")
end
function Footer()
  dark.printL("-", y, nil, "blue", "blue")
  dark.printA("by darkrising", x-13, y, nil, "yellow", "blue")
end
function displayTNameColumn(TName, Page, Extrater, Admin) -- displays passed table (TName) in special formating, if Table inside Table last argument reads table names if true
  if Extrater then
    local TName2 = {}
    for i,v in pairs(TName) do
      if Admin then
        if v.admin == true then
          table.insert(TName2, i)
        end
      else
        table.insert(TName2, i)
      end
    end
    TName = TName2
  end
  Mod = 42 * Page
  gPage = math.floor(#TName / 42)
  for i = 1, 14 do
    dark.printA(TName[i+Mod], 1, i + 3)
  end
  for i = 1, 14 do
    dark.printA(TName[(i+14)+Mod], 17, i + 3)
  end
  for i = 1, 14 do
    dark.printA(TName[(i+28)+Mod], 34, i + 3)
  end
end
function prev()
  if Page ~= 0 then
    Page = Page - 1
  end
end
function Next()
 if Page < gPage then
   Page = Page + 1
 end
end
function RunServerMenu()
  --dark.splash(1.5, "Powered by DarkGui")  
  state = "main"
  Page = 0  
  while true do
    term.clear()
    term.setCursorPos(1,1)
    resetCli()
    if Co[state].draw then    
      Co[state].draw()
      Event, key, mx, my = os.pullEvent()
      if Event == "char" then
        key = tonumber(key)
        if Co[Co[state].options[key]] then
          state = Co[state].options[key]
        else
          print("\nOption doesn't exist!")
          sleep(2)
        end
      elseif Event == "mouse_click" then
        checkArea(mx,my)
      end
    else
      Co[state].Run()
      state = Co[state].Parent
    end
  end
end
function RunServer()
  while true do
	  serverstatus = "Running"
    T, S, M = os.pullEvent()
    if T == "rednet_message" then
      if Config.encryption == true then
        M = dark.decrypt(M,1,true)
      end
      ComRay = textutils.unserialize(M)
      if type(ComRay) == "table" then
        -- Access Query
        if ComRay.area then
          ComRay.area = tonumber(ComRay.area)
        end
        if ComRay.computerid and ComRay.area and masterdb[ComRay.area] and not ComRay.super then
          if dark.db.search(ComRay.computerid, masterdb[ComRay.area].pc.general) > 0 then
            if ComRay.diskQuery then
              if dark.db.search(ComRay.diskQuery, masterdb[ComRay.area].ids) > 0 then
                rednetSendE(S, "#GRANTED#")
              else
                rednetSendE(S, "#DENIED#")
              end
            end
            if ComRay.userQuery and ComRay.passQuery then
              if ((masterdb[ComRay.area].user[ComRay.userQuery]) and (masterdb[ComRay.area].user[ComRay.userQuery].password == ComRay.passQuery)) then
                rednetSendE(S, "#GRANTED#")
              else
                rednetSendE(S, "#DENIED#")
              end
            end
          else
            rednetSendE(S, "#DENIED#")
          end
        end  
      end
      --
    end
  end
end
function stealthUpdate()
  if AutoUpdate == true then 
    if ((dark.gitUpdate("server", shell.getRunningProgram(), Version) == true) or (dark.gitUpdate("dark", "dark", dark.DARKversion) == true)) then
      os.reboot()
    end
  end
  return
end
cliVent = {}
function resetCli()
  cliVent = {}
end
function printR(text, option, bx, line, bgCol)
  if not bx then
    bx, line = term.getCursorPos()
  end
  local clindex = #cliVent + 1
  cliVent[clindex] = {}
  cliVent[clindex].startx = bx
  cliVent[clindex].endx = bx + #text
  cliVent[clindex].starty = line
  cliVent[clindex].endy = line
  cliVent[clindex].option = option
  cliVent[clindex].draw = function()
    term.setCursorPos(bx, line)
    if term.isColor() == true then
      if bgCol then term.setBackgroundColor(colors[bgCol]) end
      term.setTextColor(colors.yellow)
      term.write(text)
      dark.resetCol("white", "black")
    end
  end
  write(text)
  term.setCursorPos(1, line + 1)
end
function regBut(text, startx, line, option, bgCol)
  local clindex = #cliVent + 1
  cliVent[clindex] = {}
  cliVent[clindex].startx = startx
  cliVent[clindex].endx = startx + #text
  cliVent[clindex].starty = line
  cliVent[clindex].endy = line
  cliVent[clindex].option = option
  cliVent[clindex].draw = function()
    term.setCursorPos(startx, line)
    if term.isColor() == true then
      if bgCol then term.setBackgroundColor(colors[bgCol]) end
      term.setTextColor(colors.yellow)
      term.write(text)
      dark.resetCol("white", "black")
    end
  end  
end
function checkArea(tx,ty)
  for _, data in pairs(cliVent) do
    if ty >= data.starty and ty <= data.endy then
      if tx >= data.startx and tx <= data.endx then
        state = Co[state].options[data.option]
        data.draw()
        sleep(0.1)
      end
    end
  end
end

Co = {
  ["help"] = {
    draw = function()
      term.clear()
      term.setCursorPos(1,1)
      Header("Help")
      dark.printA("Press [1] to return to the main menu", 1, y)
      print("\nHelp comming soon!")
      os.pullEvent("key")
    end,
    options = {"main"}
  },
  ["main"] = {
    draw = function()
      Page = 0
      Header("Welcome to the Server Control Panel", "V"..Version)
      printR("[1] Disk ID managment", 1)
      printR("[2] User managment", 2)
      printR("[3] Pc managment", 3)
      printR("[4] Security Level Manager", 4)
	    printR("[5] Help", 5)
      dark.printL("-", y, nil, "blue", "blue")
      dark.printA("by darkrising", x-13, y, nil, "yellow", "blue")
	    dark.printA("                 ", 1, y, nil, "blue", "blue")
      dark.printA("Current Security Level: "..SLevel, 1, y, nil, "white", "blue")
    end,
    options = {"ids", "user_main", "pc_main", "secLev", "help"}
  },
  
  -- disk ids menu
  ["ids"] = {
    draw = function()
      databaseLoad()
      Header("ID managment","[4]Previous","[5]Next")
      regBut("[4]Previous",1,2,4, "blue")
      regBut("[5]Next",x - 7,2,5, "blue")
      dark.printL("-", y-1, nil, "blue", "blue")
      displayTNameColumn(masterdb[SLevel].ids, Page)
      dark.printL("-", y, nil, "blue", "blue")
      dark.printA("[1]ADD, [2]Delete, [3]Back, IDs:".. #masterdb[SLevel].ids .." P:"..Page + 1 .."/"..gPage + 1, 1, y, nil, "white", "blue")
      regBut("[1]ADD,",1,y,1,"blue")
      regBut("[2]Delete,",9,y,2,"blue")
      regBut("[3]Back,",20,y,3,"blue")
    end,
    options = {"ids_add", "ids_delete", "main", "ids_prev", "ids_next"}
  },
  ["ids_add"] = {
    Run = function()
      dark.cs()
      Header("Disk IDs - add")
      
      print("Do you want to add the id manually?")
      repeat
        write("y / n : ")
        answer1 = read()
      until ((answer1 == "y") or (answer1 == "n"))
      
      if answer1 == "y" then
        repeat
          write("Disk ID to add: ")
          answer = read()
        until tonumber(answer)
      else
        repeat
          print("\nPlease insert a disk into the drive.")
          _,DSide = os.pullEvent("disk")
          if disk.hasData(DSide) == true then
            answer = disk.getDiskID(DSide)
          else
            print("\nNot a disk!")
          end
        until disk.hasData(DSide) == true
        disk.eject(DSide)
        answer = tostring(answer)
      end
      
      if dark.db.search(answer,masterdb[SLevel].ids) == 0 then
        table.insert(masterdb[SLevel].ids, answer)
        print("\nAdded!")
        databaseSave()
      else
        print("\nDisk id already exists.")
      end
      write("\nPress enter to continue.")
      read()
    end,
    Parent = "ids"
  },
  ["ids_delete"] = {
    Run = function()
      dark.cs()
      Header("Disk IDs - remove")
      write("Disk ID to remove: ")
      repeat
        answer = read()
      until tonumber(answer)
      IndexNo = dark.db.search(answer, masterdb[SLevel].ids)
      if IndexNo > 0 then
        table.remove(masterdb[SLevel].ids, IndexNo)
        databaseSave()
        print("\nRemoved!")
      else
        print("\nID not found!")
      end
      sleep(GlobalMenuWaitTime)      
    end,
    Parent = "ids"    
  },
  ["ids_prev"] = {
    Run = prev,
    Parent = "ids"
  },
  ["ids_next"] = {
    Run = Next,
    Parent = "ids"
  }, 
  
  -- user menus
  ["user_main"] = {
    draw = function()
      Page = 0
      Header("User Management")
      printR("[1] Main Menu", 1)
      print("")
      printR("[2] User Manager", 2)
      printR("[3] Admin Manager", 3)
      Footer()
    end,
    options = {"main", "user_general", "user_admin"}
  },
  
  ["user_general"] = {
    draw = function()
      Page = 0
      databaseLoad()
      Header("General User Managment","[4]Previous","[5]Next")
      regBut("[4]Previous",1,2,4, "blue")
      regBut("[5]Next",x - 7,2,5, "blue")
      dark.printL("-", y-1, nil, "blue", "blue")
      displayTNameColumn(masterdb[SLevel].user, Page, true)
      dark.printL("-", y, nil, "blue", "blue")
      dark.printA("[1]ADD, [2]Delete, [3]Back, IDs:".. #masterdb[SLevel].user .." P:"..Page + 1 .."/"..gPage + 1, 1, y, nil, "white", "blue")
      regBut("[1]ADD,",1,y,1,"blue")
      regBut("[2]Delete,",9,y,2,"blue")
      regBut("[3]Back,",20,y,3,"blue")
    end,
    options = {"user_general_add","user_general_remove","user_main","user_general_prev","user_general_next"}
  },
  ["user_general_add"] = {
    Run = function()
      dark.cs()
      Header("Add User")
      write("Username: ")
      local username = read()
      repeat
        write("Password: ")
        pass1 = read("*")
        write("Confirm Password: ")
        pass2 = read("*")
      until pass1 == pass2
      pass1 = tostring(pass1)
      username = string.lower(username)
      newUser(SLevel, username, pass1, false)
      print("\nUser Added!")
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "user_general"
  },
  ["user_general_remove"] = {
    Run = function()
      dark.cs()
      Header("Remove User")
      write("User to remove: ")
      local username = read()
      if masterdb[SLevel].user[username] then
        delUser(SLevel, username)
        print("\nUser deleted!")
      else
        print("\nUser doesn't exist.")
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "user_general"
  },
  ["user_general_prev"] = {
    Run = prev,
    Parent = "user_general"
  },
  ["user_general_next"] = {
    Run = Next,
    Parent = "user_general"  
  },
  
  ["user_admin"] = {
    draw = function()
      Page = 0
      databaseLoad()
      Header("Admin Managment","[4]Previous","[5]Next")
      regBut("[4]Previous",1,2,4, "blue")
      regBut("[5]Next",x - 7,2,5, "blue")
      dark.printL("-", y-1, nil, "blue", "blue")
      displayTNameColumn(masterdb[SLevel].user, Page, true, true)
      dark.printL("-", y, nil, "blue", "blue")
      dark.printA("[1]Promote, [2]Demote, [3]Back, IDs:".. #masterdb[SLevel].user .." P:"..Page + 1 .."/"..gPage + 1, 1, y, nil, "white", "blue")
      regBut("[1]Promote,",1,y,1,"blue")
      regBut("[2]Demote,",13,y,2,"blue")
      regBut("[3]Back,",24,y,3,"blue")
    end,
    options = {"user_admin_promote","user_admin_demote","user_main","user_admin_prev","user_admin_next"}  
  },
  ["user_admin_promote"] = {
    Run = function()
      dark.cs()
      Header("Promote User")
      write("User to promote to admin: ")
      username = read()
      if masterdb[SLevel].user[username] then
        masterdb[SLevel].user[username].admin = true
        databaseSave()
        print("\nUser promoted")
      else
        print("\nUser doesn't exist")
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "user_admin"
  },
  ["user_admin_demote"] = {
    Run = function()
      dark.cs()
      Header("Demote User")
      write("User to demote from admin: ")
      username = read()
      if masterdb[SLevel].user[username] then
        masterdb[SLevel].user[username].admin = false
        databaseSave()
        print("\nUser demoted")
      else
        print("\nUser doesn't exist")
      end  
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "user_admin"  
  },
  ["user_admin_prev"] = {
    Run = prev,
    Parent = "user_admin"
  },
  ["user_admin_next"] = {
    Run = Next,
    Parent = "user_admin"  
  },
  
  -- pc menus
  ["pc_main"] = {
    draw = function()
      Header("Pc Management")
      printR("[1] Main Menu", 1)
      print("")
      printR("[2] Pc Whitelist", 2)
      printR("[3] Super Pc List", 3)
      Footer()
    end,
    options = {"main", "pc_general", "pc_super"}
  },
  
  ["pc_general"] = {
    draw = function()
      Page = 0
      databaseLoad()
      Header("Pc Whitelist","[4]Previous","[5]Next")
      regBut("[4]Previous",1,2,4, "blue")
      regBut("[5]Next",x - 7,2,5, "blue")
      dark.printL("-", y-1, nil, "blue", "blue")
      displayTNameColumn(masterdb[SLevel].pc.general, Page)
      dark.printL("-", y, nil, "blue", "blue")
      dark.printA("[1]ADD, [2]Delete, [3]Back, IDs:".. #masterdb[SLevel].pc.general .." P:"..Page + 1 .."/"..gPage + 1, 1, y, nil, "white", "blue")
      regBut("[1]ADD,",1,y,1,"blue")
      regBut("[2]Delete,",9,y,2,"blue")
      regBut("[3]Back,",20,y,3,"blue")
    end,
    options = {"pc_general_add","pc_general_remove","pc_main","pc_general_prev","pc_general_next"}
  },
  ["pc_general_add"] = {
    Run = function()
      dark.cs()
      Header("Pc whitelist - add")
      write("ID to add to the whitelist: ")
      repeat
        answer = read()
      until tonumber(answer)
      
      if dark.db.search(answer,masterdb[SLevel].pc.super) == 0 then
        table.insert(masterdb[SLevel].pc.general, answer)
        print("\nAdded!")
        databaseSave()
      else
        print("\nPc id exists in the super pc list.")
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "pc_general"
  },
  ["pc_general_remove"] = {
    Run = function()
      dark.cs()
      Header("Pc whitelist - remove")
      write("ID to remove from whitelist: ")
      repeat
        answer = read()
      until tonumber(answer)
      IndexNo = dark.db.search(answer, masterdb[SLevel].pc.general)
      if IndexNo > 0 then
        table.remove(masterdb[SLevel].pc.general, IndexNo)
        databaseSave()
        print("\nRemoved!")
      else
        print("\nID not found!")
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "pc_general"    
  },
  ["pc_general_prev"] = {
    Run = prev,
    Parent = "pc_general"   
  },
  ["pc_general_next"] = {
    Run = Next,
    Parent = "pc_general"    
  },
  
  ["pc_super"] = {
    draw = function()
      Page = 0
      databaseLoad()
      Header("Super Pc List","[4]Previous","[5]Next")
      regBut("[4]Previous",1,2,4, "blue")
      regBut("[5]Next",x - 7,2,5, "blue")
      dark.printL("-", y-1, nil, "blue", "blue")
      displayTNameColumn(masterdb[SLevel].pc.super, Page)
      dark.printL("-", y, nil, "blue", "blue")
      dark.printA("[1]ADD, [2]Delete, [3]Back, IDs:".. #masterdb[SLevel].pc.super .." P:"..Page + 1 .."/"..gPage + 1, 1, y, nil, "white", "blue")
      regBut("[1]ADD,",1,y,1,"blue")
      regBut("[2]Delete,",9,y,2,"blue")
      regBut("[3]Back,",20,y,3,"blue")      
    end,
    options = {"pc_super_add","pc_super_remove","pc_main","pc_super_prev","pc_super_next"}
  },
  ["pc_super_add"] = {
    Run = function()
      dark.cs()
      Header("Super Pc - add")
      write("ID to promote / add: ")
      repeat
        answer = read()
      until tonumber(answer)
      table.insert(masterdb[SLevel].pc.super, answer)
      
      IndexNo = dark.db.search(answer, masterdb[SLevel].pc.general)
      if IndexNo > 0 then
        table.remove(masterdb[SLevel].pc.general, IndexNo)
        print("\nPromoted!")
      else
        print("\nAdded!")
      end
      
      databaseSave()
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "pc_super"
  },
  ["pc_super_remove"] = {
    Run = function()
      dark.cs()
      Header("Super Pc - remove")
      write("ID to remove: ")
      repeat
        answer = read()
      until tonumber(answer)
      IndexNo = dark.db.search(answer, masterdb[SLevel].pc.super)
      if IndexNo > 0 then
        table.remove(masterdb[SLevel].pc.super, IndexNo)
        print("\nRemoved!")
        print("\nShall I re-add the id to the pc whitelist?")
        repeat
          write("y or n: ")
          answer2 = read()
        until ((answer2 == "y") or (answer2 == "n"))
        if answer2 == "y" then
          table.insert(masterdb[SLevel].pc.general, answer)
        end
        databaseSave()
        print("\nDone!")
      else
        print("\nID not found!")
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "pc_super"    
  },
  ["pc_super_prev"] = {
    Run = prev,
    Parent = "pc_super"   
  },
  ["pc_super_next"] = {
    Run = Next,
    Parent = "pc_super"    
  },
 
  -- security level menu
  ["secLev"] = {
    draw = function()
      databaseLoad()
      Header("Security Level Manager")
      printR("[1] Main Menu", 1)
      print("\nSecurity Levels: ".. #masterdb)
      print("")
      printR("[2] Select Level", 2)
      printR("[3] Add Levels", 3)
      printR("[4] Remove a Level", 4)
      print("\nNote: Removing a level will remove everything inside that level from the database.")
      Footer()
      dark.printA("Current Security Level: "..SLevel, 1, y, nil, "white", "blue")
    end,
    options = {"main","secLev_select","secLev_add","secLev_remove"}
  },
  ["secLev_select"] = {
    Run = function()
      dark.cs()
      Header("Security Level - select")
      print("Currently Selected Security Level: "..SLevel)
      print("Security Levels: ".. Config.securityLevelNumber)
      repeat
        write("\nSecurity Level to switch too: ")        
        answer = read()
      until tonumber(answer)
      answer = tonumber(answer)
      if ((answer < 0) or (answer > Config.securityLevelNumber)) then
        print("\nInvalid number entered.")
      else
        SLevel = answer
        print("Switched to level: "..SLevel)
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "secLev"
  },
  ["secLev_add"] = {
    Run = function()
      dark.cs()
      Header("Security Level - add")
      print("This will add new security levels to the database.")
      repeat
        write("\nAmount of Security Levels to add: ")
        answer = read()
      until tonumber(answer)
      answer = tonumber(answer)
      for i = 1, answer do
        table.insert(masterdb, makenew())
      end
      Config.securityLevelNumber = #masterdb
      databaseSave()
      print("\nAdded "..answer.." security levels.")
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "secLev"
  },
  ["secLev_remove"] = {
    Run = function()
      dark.cs()
      Header("Security Level - remove")  
      print("This will DELETE a security level from the database, removing all data from the chosen security level!")
      print("Once a level is deleted, it is gone forever. (a very long time!")
      print("Removing a security level in the middle of the table will cause the next avalible one to drop down.")
      print("For Example: if you had 10 security levels and deleted 5, 6 would become 5")
      repeat
        write("Do you want to continue? y / n : ")
        answer = read()
      until ((answer == "y") or (answer == "n"))
      if answer == "y" then
        repeat
          write("\nSecurity level you wish to erase: ")
          answer = read()
        until tonumber(answer)
        answer = tonumber(answer)
        if answer > #masterdb then
          print("\nInvalid Level entered")
        else
          table.remove(masterdb, answer)
          Config.securityLevelNumber = #masterdb
          databaseSave()
          print("\nRemoved security level: "..answer)
        end
      else
        print("\nReturning to safety!")
      end
      sleep(GlobalMenuWaitTime)
    end,
    Parent = "secLev"
  },
}

if fs.exists(".DarkS_conf") == false then 
  Config = {}
  masterdb = {}
  Header("Dark Server Setup")
  print("Computer's id is ".. os.getComputerID())
  repeat
    write("security level amount (must be a number): ")
    securityLevelNumber = io.read()
  until tonumber(securityLevelNumber)
  Config.securityLevelNumber = tonumber(securityLevelNumber)
  for i = 1, securityLevelNumber do
    table.insert(masterdb, makenew())
  end
  Config.encryption = true
  if fs.isDir(".DarkDB") == true then fs.delete(".DarkDB") end
  dark.db.save(".DarkDB", masterdb)
  dark.db.save(".DarkS_conf", Config)
end

databaseLoad()
parallel.waitForAll(RunServer, RunServerMenu, stealthUpdate)