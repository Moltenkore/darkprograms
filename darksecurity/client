--Title: Dark Client
Version = 4.0
--Author: Darkrising (minecraft name djhannz)
--Platform: ComputerCraft Lua Virtual Machine
AutoUpdate = true
x,y = term.getSize()
if fs.exists("dark") == false then -- load darkAPI
  print("Missing DarkAPI")
  sleep(2)
  print("Attempting to download...")
  getGit = http.get("https://github.com/darkrising/darkprograms/raw/darkprograms/darksecurity/dark")
  getGit = getGit.readAll()
  file = fs.open("dark", "w")
  file.write(getGit)
  file.close()
  os.reboot()
else
  os.loadAPI("dark")
end
function rednetSendE(ID, Message)
  if Config.encryption == true then
    Message = dark.encrypt(Message, 1)
  end
  rednet.send(ID, Message)
end
function rednetReceiveE(TimeA)
  local Se,Me,Di = rednet.receive(TimeA)
  if Config.encryption == true then
    Me = dark.decrypt(Me, 1, true)
  end
  return Se,Me,Di
end
function Header(text)
  dark.printL("-", 1)
  dark.printA("|", x, 2)
  dark.printA("|", 1, 2)
  dark.printC(text, 2)
  dark.printL("-", 3, 4)
end
function keycard_mainProgram()
  while true do
    event, eventinfo, extrainfo = os.pullEvent("disk")
    ComRay2 = {}
    ComRay2.computerid = os.getComputerID()
    ComRay2.area = Config.securityLevel
    
    if disk.hasData(eventinfo) == true then
      ComRay2.diskQuery = disk.getDiskID(eventinfo) 
      SendString = textutils.serialize(ComRay2)
      rednetSendE(Config.serverID, SendString)
      
      S, M = rednetReceiveE(2)
      
      if M == "#GRANTED#" then
        disk.eject(eventinfo)
        rs.setOutput(Config.doorside, true)
        sleep(Config.pulseTime)
        rs.setOutput(Config.doorside, false)
      end
      disk.eject(eventinfo)
    else
      disk.eject(eventinfo)
    end
  end
end
function userandpassword_mainProgram()
  while true do
    ComRay = {}
    ComRay.computerid = os.getComputerID()
    ComRay.area = Config.securityLevel
    
    term.clear() term.setCursorPos(1,1)
    Header(Config.tLabel)
    print("") print("")
    
    write("User: ") 
    status, User = pcall(read)
    ComRay.userQuery = User
    
    write("Password: ") 
    status, password = pcall(read, "*")
    ComRay.passQuery = password
    
    SendString = textutils.serialize(ComRay)
    
    if ((User ~= nil) and (password ~= nil)) then
      rednetSendE(Config.serverID , SendString)
      ID, MES = rednetReceiveE(2)
      if MES == nil then
      print("\nNo response from server!")
      sleep(2)
      else
        if MES == "#GRANTED#" then
          dark.printC("Correct", 4, 4)
          rs.setOutput(Config.doorside, true)
          sleep(Config.pulseTime)
          rs.setOutput(Config.doorside, false)
        else
          print("")
          dark.printC("Incorrect", 4, 4)
          sleep(1)
        end
      end
    end
  end
end

S = dark.findPeripheral("modem")
if S == false then
  print("Please attach Modem") 
  return exit
else
  rednet.open(S)  
end
function stealthUpdate()
  if AutoUpdate == true then 
    if ((dark.gitUpdate("client", shell.getRunningProgram(), Version) == true) or (dark.gitUpdate("dark", "dark", dark.DARKversion) == true)) then
      os.reboot()
    end
  end
end
if fs.exists(".DarkC_conf") == false then
  Config = {}
  SideList = rs.getSides()
  
  term.clear()
  term.setCursorPos(1,1)
  Header("Dark Client Setup")
  
  write("Please type the server / relay id: ")
  Config.serverID = tonumber(io.read())
  
  write("Terminal Security Level: ")
  Config.securityLevel = io.read()
  
  repeat
    write("redstone output side: ")
    doorside = io.read()
  until dark.db.search(doorside, SideList) > 0
  Config.doorside = doorside
  
  write("redstone pulse time (in seconds): ")
  pulseTime = tonumber(io.read())
  Config.pulseTime = pulseTime
  
  print("terminal label: ")
  Config.tLabel = io.read()

  print("Do you wish to use encryption on rednet communication?")
  print("Useful for bundle cable information protection!")
  repeat
  write("\ny / n : ")
  encryptq = read()
  until ((encryptq == "y") or (encryptq == "n"))
  if encryptq == "y" then
    Config.encryption = true
  else
    Config.encryption = false
  end
  
  print("\nWhat type of terminal is this?")
  print("options: 'keycard', 'password' or 'both'")
  repeat
  write(": ")
  tType = read()
  until ((tType == "keycard") or (tType == "password") or (tType == "both"))
  Config.tType = tType
  
  dark.db.save(".DarkC_conf", Config)
  
  print("\nsetup complete!")
  sleep(1)
end

Config = dark.db.load(".DarkC_conf")

if tType == "keycard" then
  parallel.waitForAll(keycard_mainProgram, stealthUpdate)
elseif tType == "password" then
  parallel.waitForAll(userandpassword_mainProgram, stealthUpdate)
elseif tType == "both" then
  parallel.waitForAll(keycard_mainProgram, userandpassword_mainProgram, stealthUpdate)
end
